var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _jsxFileName="/Users/kotyo/clones/react-native-figwheel-bridge/figwheel-bridge.js";var React=require('react');var ReactNative=require('react-native');var createReactClass=require('create-react-class');var URI=require("uri-js");var cljsBootstrap=require("./clojurescript-bootstrap.js");var expo=require('expo');function cljsNamespaceToObject(ns){return ns.replace(/\-/,"_").split(/\./).reduce(function(base,arg){return base?base[arg]:base;},goog.global);}function listenForReload(cb){if(cljsNamespaceToObject("figwheel.core.event_target")){figwheel.core.event_target.addEventListener("figwheel.after-load",cb);}}var figwheelApp=function figwheelApp(config){return createReactClass({getInitialState:function getInitialState(){return{loaded:false};},render:function render(){if(!this.state.loaded){var plainStyle={flex:1,alignItems:'center',justifyContent:'center'};return React.createElement(ReactNative.View,{style:plainStyle,__source:{fileName:_jsxFileName,lineNumber:30}},React.createElement(ReactNative.Text,{__source:{fileName:_jsxFileName,lineNumber:31}},"Waiting for Figwheel to load files."));}return this.state.root();},componentDidMount:function componentDidMount(){var app=this;var refresh=function refresh(e){console.log("Refreshing Figwheel Root Element");app.forceUpdate();};if(typeof goog==="undefined"){loadApp(config,function(appRoot){goog.figwheelBridgeRefresh=refresh;app.setState({root:appRoot,loaded:true});if(config.autoRefresh){listenForReload(refresh);}});}}});};function isChrome(){return typeof importScripts==="function";}function correctUrl(url){var u=URI.parse(url);if(isChrome()){u.host="localhost";}return URI.serialize(u);}function assert(predVal,message){if(!predVal){throw new Error(message);}}function loadApp(config,onLoadCb){var confProm;if(config.optionsUrl){confProm=cljsBootstrap.fetchConfig(correctUrl(config.optionsUrl)).then(function(conf){return(0,_extends2.default)(conf,config);}).catch(function(err){console.error("Unable to fetch optionsUrl "+config.optionsUrl);});}else{confProm=Promise.resolve(config);}if(confProm){confProm.then(cljsBootstrap.bootstrap).then(function(conf){var mainNsObject=cljsNamespaceToObject(conf.main);assert(mainNsObject,"ClojureScript Namespace "+conf.main+" not found.");assert(mainNsObject[config.renderFn],"Render function "+config.renderFn+" not found.");onLoadCb(mainNsObject[config.renderFn]);});}}function assertKeyType(obj,k,type){assert(typeof obj[k]==type,k+" must be a "+type);}function validateOptions(options){assert(options.appName,"must provide an appName");assertKeyType(options,"appName","string");assertKeyType(options,"autoRefresh","boolean");assertKeyType(options,"expo","boolean");assertKeyType(options,"renderFn","string");if(options.optionsUrl){assertKeyType(options,"optionsUrl","string");}else{assert(options["asset-path"],"must provide an asset-path option when no cljscOptionsUrl is provided");assert(options["main"],"must provide a main option when no cljscOptionsUrl is provided");assertKeyType(options,"asset-path","string");assertKeyType(options,"main","string");if(options.preloads){assertKeyType(options,"preloads","string");}if(options["closure-defines"]){assertKeyType(options,"closure-defines","string");}}}function shimRequire(requireMap){var oldRequire=window.require;window.require=function(id){console.info("Requiring: "+id);if(requireMap[id]){return requireMap[id];}if(oldRequire){return oldRequire(id);}};}function startApp(options){var config=(0,_extends2.default)({renderFn:'figwheel_rn_root',autoRefresh:true},options);validateOptions(config);if(config.expo===true&&expo!==undefined){expo.registerRootComponent(figwheelApp(config));}else{ReactNative.AppRegistry.registerComponent(config.appName,function(){return figwheelApp(config);});}}module.exports={shimRequire:shimRequire,start:startApp};

